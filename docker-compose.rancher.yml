# This file merged with docker-compose.yml creates a production-like
# configuration for deploying the Rancher stack.
# Remember to start Rancher Secrets from Catalog before the deployment!
version: '2'

secrets:
  portus-secret-key-base:
    file: secrets/secret-key-base.txt
  portus-password:
    file: secrets/portus-password.txt
  portus-mysql-root-password:
    file: secrets/mysql-root-password.txt
  portus-mysql-password:
    file: secrets/mysql-password.txt
  portus-email-smtp-password:
    file: secrets/email-smtp-password.txt

volumes:
  lb-logs:

x-portus-service:
  &portus-service
    secrets:
      - portus-secret-key-base
      - portus-password
      - portus-mysql-password
      - portus-email-smtp-password
    environment:
      PORTUS_SECRET_KEY_BASE_FILE: /run/secrets/portus-secret-key-base
      PORTUS_PASSWORD_FILE: /run/secrets/portus-password
      PORTUS_DB_PASSWORD_FILE: /run/secrets/portus-mysql-password
      PORTUS_EMAIL_SMTP_PASSWORD_FILE: /run/secrets/portus-email-smtp-password

x-portus-member:
  &portus-member
    labels:
      io.rancher.container.pull_image: always
      io.rancher.container.hostname_override: container_name
      io.rancher.scheduler.affinity:host_label: portus=true
    restart: on-failure

services:
  lb:
    image: rancher/lb-service-haproxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - lb-logs:/var/log/haproxy
    labels:
      # Put load balancer containers on hosts with label portus=true
      io.rancher.scheduler.affinity:host_label: portus=true
      # Allow to interact with the Rancher API
      io.rancher.container.create_agent: 'true'
      io.rancher.container.agent.role: environmentAdmin

  letsencrypt:
    image: mgbi/rancher-letsencrypt:v1.0.0
    environment:
      API_VERSION: Production
      CERT_NAME: ${PORTUS_FQDN}
      DNS_RESOLVERS: 8.8.8.8:53,8.8.4.4:53
      DOMAINS: ${PORTUS_FQDN}
      EMAIL: ${LETSENCRYPT_EMAIL}
      EULA: 'Yes'
      PROVIDER: HTTP
      PUBLIC_KEY_TYPE: RSA-2048
      RENEWAL_PERIOD_DAYS: '21'
      RENEWAL_TIME: '3'
      RUN_ONCE: 'false'
    labels:
      # Put let's encrypt containers on hosts with label portus=true
      io.rancher.scheduler.affinity:host_label: portus=true
      io.rancher.container.create_agent: 'true'
      io.rancher.container.agent.role: environment

  portus:
    <<: *portus-service
    <<: *portus-member
    restart: unless-stopped

  background:
    <<: *portus-service
    <<: *portus-member
    restart: unless-stopped

  db:
    <<: *portus-member
    secrets:
      - portus-mysql-root-password
      - portus-mysql-password
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/portus-mysql-root-password
      MYSQL_PASSWORD_FILE: /run/secrets/portus-mysql-password
    restart: unless-stopped

  registry:
    labels:
      io.rancher.container.pull_image: always
      io.rancher.container.hostname_override: container_name
      io.rancher.scheduler.affinity:host_label: registry=true
    restart: unless-stopped

  portus-certs-generator:
    labels:
      io.rancher.container.pull_image: always
      io.rancher.container.hostname_override: container_name
      io.rancher.scheduler.affinity:host_label: portus=true
      io.rancher.container.start_once: true

  registry-letsencrypt:
    labels:
      io.rancher.scheduler.affinity:host_label: registry=true
      io.rancher.container.create_agent: 'true'
      io.rancher.container.agent.role: environment