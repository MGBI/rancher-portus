version: '2'

volumes:
  mysql-data:
  portus-data:
  registry-data:
  portus-certs:
  registry-certs:

services:
  portus:
    image: opensuse/portus:head
    container_name: portus
    depends_on:
      - db
      - portus-certs-generator
    environment:
      PORTUS_DELETE_ENABLED: 'true'
      PORTUS_MACHINE_FQDN_VALUE: ${PORTUS_FQDN}

      # MySQL DB
      PORTUS_DB_HOST: db
      PORTUS_DB_DATABASE: portus_production
      PORTUS_DB_PASSWORD: ${DATABASE_PASSWORD}
      PORTUS_DB_POOL: '5'

      # Secrets
      PORTUS_SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      # certificates are configured in load-balancer
      PORTUS_CHECK_SSL_USAGE_ENABLED: 'false'
      PORTUS_KEY_PATH: /mnt/certs/key.pem
      PORTUS_PASSWORD: ${PORTUS_PASSWORD}
      PORTUS_SIGNUP_ENABLED: 'false'

      # # Since we have no nginx, portus have to serve the static files
      RAILS_SERVE_STATIC_FILES: 'true'
    volumes:
      - portus-data:/srv/Portus/public
      - portus-certs:/mnt/certs:ro

  background:
    image: opensuse/portus:head
    depends_on:
      - portus
      - db
      - portus-certs-generator
    environment:
      PORTUS_BACKGROUND: 'true'

      # Theoretically not needed, but cconfig's been buggy on this...
      CCONFIG_PREFIX: PORTUS
      PORTUS_MACHINE_FQDN_VALUE: ${PORTUS_FQDN}

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      PORTUS_DB_HOST: db
      PORTUS_DB_DATABASE: portus_db
      PORTUS_DB_PASSWORD: ${DATABASE_PASSWORD}
      PORTUS_DB_POOL: '5'

      # Secrets. It can possibly be handled better with Swarm's secrets.
      PORTUS_SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      PORTUS_KEY_PATH: /mnt/certs/key.pem
      PORTUS_PASSWORD: ${PORTUS_PASSWORD}
    volumes:
      - portus-data:/srv/Portus/public
      - portus-certs:/mnt/certs:ro

  db:
    image: mariadb:10.0.23
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;' --innodb-flush-log-at-trx-commit=0
    environment:
      MYSQL_DATABASE: portus_db
      # Again, the password shouldn't be handled like this.
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
  
  registry:
    image: registry:2.6
    depends_on:
      - portus-certs-generator
      - registry-letsencrypt
    container_name: registry
    environment:
      # Storage
      REGISTRY_STORAGE_DELETE_ENABLED: 'true'
      
      # Authentication
      REGISTRY_AUTH_TOKEN_REALM: https://${PORTUS_FQDN}/v2/token
      REGISTRY_AUTH_TOKEN_SERVICE: ${REGISTRY_FQDN}
      REGISTRY_AUTH_TOKEN_ISSUER: ${PORTUS_FQDN}
      REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: /mnt/certs/cert.pem
      REGISTRY_AUTH_TOKEN_AUTOREDIRECT: 'false'

      # SSL
      REGISTRY_HTTP_TLS_CERTIFICATE: /certificates/fullchain.pem
      REGISTRY_HTTP_TLS_KEY: /certificates/privkey.pem

      # Portus endpoint
      REGISTRY_NOTIFICATIONS_ENDPOINTS: >
        - name: portus
          url: http://portus:3000/v2/webhooks/events
          timeout: 2000ms
          threshold: 5
          backoff: 1s
      
      # Debug
      # REGISTRY_LOG_LEVEL: debug
    volumes:
      - registry-data:/var/lib/registry
      - portus-certs:/mnt/certs:ro
      - registry-certs:/certificates:ro
    ports:
      - 5000:5000

  portus-certs-generator:
    image: stakater/ssl-certs-generator:1.0
    environment: 
      SSL_SUBJECT: portus
      DEBUG: 0
    volumes:
      - portus-certs:/certs

  registry-letsencrypt:
    image: mgbi/rancher-letsencrypt:v1.0.0
    environment:
      API_VERSION: Production
      CERT_NAME: ${REGISTRY_FQDN}
      DNS_RESOLVERS: 8.8.8.8:53,8.8.4.4:53
      DOMAINS: ${REGISTRY_FQDN}
      EMAIL: ${LETSENCRYPT_EMAIL}
      EULA: 'Yes'
      PROVIDER: HTTP
      PUBLIC_KEY_TYPE: RSA-2048
      RENEWAL_PERIOD_DAYS: '21'
      RENEWAL_TIME: '3'
      RUN_ONCE: 'false'
    volumes:
      - registry-certs:/etc/letsencrypt/production/certs/${REGISTRY_FQDN}